<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">
    <mvc:annotation-driven/> <!--mvc 패턴을 쓰고 싶으면 꼭 줘야 한다.-->
    <context:annotation-config/> <!--어노테이션 활성화 멤버필드, 메소드-->

    <!-- 클래스 어노테이션 허용, 시작패키지 설정-->
    <context:component-scan base-package="com.koreait.first" />

 <!--서블릿의 예외들 2개-->

    <!--
    **는 몇 차 주소가 있던 상관없다는 뜻
    web.xml <servlet-mapping>이 /로 시작하는 모든 요청을 <servlet>의 dispatcher가 다 받아서 handlermapping이 그 요청을 받아주는 controller가 있는지 물어보고 매핑시킨다.
    그런데 css나 js나 img는 controller필요없다
    /res/로 시작하는 요청이 들어오면 dispatcher가 관여하지 않고 얘가 담당해서 "webapp"에 /res/폴더 로 연결시키겠다
    -->
    <mvc:resources mapping="/res/**" location="/res/" />
    <mvc:resources mapping="/img/**" location="file:///D:/imgs/"/>

    <!-- 사용할 파일명을 완성해주는 객체 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
        <property name="order" value="2"/>
    </bean>

    <!-- pile여는 것을 이제 tiles에 맡겨야 한다 그래서 순서가 1번째이고 2번쨰가 viewResolver가 되는 것이다. 그리고 viewResolver도 바꿔준다  그래서 tiels부터 먼저 쓰고 안돼면 viewResolever로 넘어간다 -->

    <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
        <property name="order" value="1"/>
    </bean>

    <!--pom.xml에서 라이브러리 설치하고 여기서 bean등록을 해야지 쓸 수 있다-->
    <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>



    <bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions"> <!--  value를 list로 넣어줘야 해요 왜냐하면 이 멤버필드의 type은 String 배열이거든요 -->
            <list>
                <value>/WEB-INF/tiles.xml</value> <!--설정파일이 여러개라면 여러개를 줄 수 있게끔 구성되어 있다-->
            </list>
        </property>
    </bean>



</beans>